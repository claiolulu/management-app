{\rtf1\ansi\deff0 {\fonttbl {\f0 Times New Roman;} {\f1 Courier New;} {\f2 Arial;}}
{\colortbl;\red0\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;}

\f2\fs28\b Complete Web Application Requirements for AI Rebuild\b0\par
\par

\f2\fs20\b Application Overview\b0\par
\f0\fs18 Type: Full-stack task management web application\par
Architecture: Spring Boot backend + React frontend with JWT authentication\par
Database: MySQL with JPA/Hibernate ORM\par
Primary Features: User authentication, task assignment, calendar view, role-based access control, file uploads, email notifications\par
\par

\f2\fs24\b 1. Backend Requirements (Spring Boot 3.2.1)\b0\par
\par

\f2\fs20\b 1.1 Database Schema\b0\par
\par
\f1\fs16
-- User Entity\par
CREATE TABLE users (\par
    id BIGINT AUTO_INCREMENT PRIMARY KEY,\par
    username VARCHAR(50) UNIQUE NOT NULL,\par
    email VARCHAR(255) UNIQUE NOT NULL,\par
    password_hash VARCHAR(255) NOT NULL,\par
    avatar VARCHAR(255),\par
    projects INT DEFAULT 0,\par
    tasks INT DEFAULT 0,\par
    completed INT DEFAULT 0,\par
    role ENUM('MANAGER', 'STAFF_GENERAL') NOT NULL DEFAULT 'STAFF_GENERAL',\par
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\par
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\par
);\par
\par
-- Activity Entity (Tasks)\par
CREATE TABLE activities (\par
    id BIGINT AUTO_INCREMENT PRIMARY KEY,\par
    assigned_user_id BIGINT NOT NULL,\par
    assigned_by_user_id BIGINT,\par
    assigned_user_name VARCHAR(50),\par
    title VARCHAR(255),\par
    date DATE NOT NULL,\par
    time VARCHAR(10),\par
    description TEXT NOT NULL,\par
    status ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', 'SCHEDULED') NOT NULL DEFAULT 'PENDING',\par
    priority ENUM('LOW', 'MEDIUM', 'HIGH') NOT NULL DEFAULT 'MEDIUM',\par
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\par
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\par
    FOREIGN KEY (assigned_user_id) REFERENCES users(id),\par
    FOREIGN KEY (assigned_by_user_id) REFERENCES users(id)\par
);\par
\f0\par

\f2\fs20\b 1.2 Core Backend Components\b0\par
\par

\f2\fs18\b 1.2.1 Entity Classes\b0\par
\f0\fs16 • User.java - User entity with role-based permissions, profile picture support\par
• Activity.java - Task entity with status, priority, assignment tracking\par
• Interaction.java - System interaction logging\par
• PasswordResetToken.java - Password reset token management\par
\par

\f2\fs18\b 1.2.2 Repository Interfaces\b0\par
\f0\fs16 • UserRepository.java - User CRUD operations with role filtering\par
• ActivityRepository.java - Complex task queries with pagination, date filtering, user filtering\par
• InteractionRepository.java - System logging repository\par
• PasswordResetTokenRepository.java - Token management\par
\par

\f2\fs18\b 1.2.3 Service Layer\b0\par
\f0\fs16 • UserService.java - User management, authentication, profile operations\par
• ActivityService.java - Task CRUD, pagination, filtering, status management\par
• EmailService.java - Password reset email sending via SMTP\par
• JwtUtil.java - JWT token generation and validation\par
\par

\f2\fs18\b 1.2.4 REST API Controllers\b0\par
\par
\f2\fs16\b AuthController.java\b0 - Authentication endpoints:\par
\f0\fs14 • POST /auth/login - User login with JWT token response\par
• POST /auth/register - User registration with validation\par
• POST /auth/forgot-password - Password reset email trigger\par
• POST /auth/reset-password - Password reset with token validation\par
• PUT /auth/profile - Profile update with avatar upload\par
\par

\f2\fs16\b TaskApiController.java\b0 - Task management endpoints:\par
\f0\fs14 • GET /tasks/user-tasks - Paginated user tasks\par
• GET /tasks/other-tasks - Manager view of team tasks\par
• GET /tasks/by-date-detailed - Date-specific task filtering\par
• GET /tasks/calendar - Calendar view data\par
• POST /tasks - Task creation\par
• PUT /tasks/{id} - Task updates\par
• DELETE /tasks/{id} - Task deletion\par
\par

\f2\fs20\b 1.3 Security Configuration\b0\par
\f0\fs16 • JWT-based authentication with 24-hour token expiry\par
• CORS configuration for multiple frontend origins (localhost:3000, 5173)\par
• BCrypt password encryption\par
• Role-based access control (Manager vs Staff permissions)\par
• File upload security with size limits (10MB)\par
\par

\f2\fs24\b 2. Frontend Requirements (React + Vite)\b0\par
\par

\f2\fs20\b 2.1 Project Structure\b0\par
\par
\f1\fs14
frontend/\par
├── src/\par
│   ├── main.jsx - React app entry point\par
│   ├── App.jsx - Main app component with routing\par
│   ├── components/\par
│   │   ├── LoginPage.jsx - Authentication interface\par
│   │   ├── Homepage.jsx - Main dashboard with calendar\par
│   │   ├── AssignTaskPage.jsx - Task creation form\par
│   │   ├── AssignTask.jsx - Quick task assignment component\par
│   │   ├── DateTasksPage.jsx - Date-specific task view\par
│   │   ├── TaskDetail.jsx - Individual task details\par
│   │   ├── HistoryPage.jsx - Task history view\par
│   │   ├── ProfileSettings.jsx - User profile management\par
│   │   ├── RoleManagement.jsx - Manager role assignment\par
│   │   ├── ResetPasswordPage.jsx - Password reset completion\par
│   │   └── ConfirmDialog.jsx - Confirmation dialogs\par
│   ├── config/\par
│   │   └── api.js - API configuration and base URLs\par
│   └── styles/\par
├── index.html - HTML entry point\par
├── package.json - Dependencies and scripts\par
└── vite.config.js - Vite configuration\par
\f0\par

\f2\fs20\b 2.2 Core Components Specifications\b0\par
\par

\f2\fs18\b 2.2.1 LoginPage.jsx\b0\par
\f0\fs16 • User authentication form with validation\par
• Registration modal with username/email/password fields\par
• Forgot password modal with email input\par
• JWT token storage in localStorage\par
• Form validation with error handling\par
• Loading states for all operations\par
\par

\f2\fs18\b 2.2.2 Homepage.jsx\b0\par
\f0\fs16 • Main dashboard with calendar widget\par
• Paginated task lists (user tasks + team tasks for managers)\par
• Calendar month view with task indicators (red dots for user tasks, green for others)\par
• Task filtering by date with clickable calendar days\par
• Profile menu with settings access\par
• Role-based UI (manager features hidden for staff)\par
• Task deletion with confirmation dialogs\par
\par

\f2\fs24\b 3. Authentication & Security Requirements\b0\par
\par

\f2\fs20\b 3.1 JWT Authentication Flow\b0\par
\f0\fs16 1. User login → Server validates → JWT token returned\par
2. Token stored in localStorage\par
3. All API requests include Authorization: Bearer <token> header\par
4. Token validation on each request\par
5. Automatic logout on token expiry\par
6. Refresh token mechanism (optional but recommended)\par
\par

\f2\fs20\b 3.2 Role-Based Access Control\b0\par
\par
\f2\fs16\b Managers can:\b0\par
\f0\fs14 • View all team tasks\par
• Assign tasks to any user\par
• Manage user roles\par
• Access role management interface\par
\par

\f2\fs16\b Staff can:\b0\par
\f0\fs14 • View only assigned tasks\par
• Update task status\par
• Manage personal profile\par
\par

\f2\fs24\b 4. API Endpoint Specifications\b0\par
\par

\f2\fs20\b 4.1 Authentication Endpoints\b0\par
\par
\f1\fs14
POST /api/auth/login\par
Body: { username: string, password: string }\par
Response: { token: string, user: UserObject }\par
\par
POST /api/auth/register\par
Body: { username: string, email: string, password: string }\par
Response: { message: string, user: UserObject }\par
\par
POST /api/auth/forgot-password\par
Body: { email: string }\par
Response: { message: string }\par
\f0\par

\f2\fs20\b 4.2 Task Management Endpoints\b0\par
\par
\f1\fs14
GET /api/tasks/user-tasks?page=0&size=10\par
Response: { items: TaskArray, page: number, totalPages: number, hasMore: boolean }\par
\par
POST /api/tasks\par
Body: { assignedUser: string, date: string, description: string, priority: string, status: string }\par
Response: { id: number, ...taskData }\par
\f0\par

\f2\fs24\b 5. Additional Requirements\b0\par
\par

\f2\fs20\b 5.1 File Upload Requirements\b0\par
\f0\fs16 • Profile picture upload support\par
• Maximum file size: 10MB\par
• Supported formats: JPEG, PNG, GIF\par
• Server-side file validation\par
• Unique filename generation (UUID-based)\par
• File storage in /uploads/profiles/ directory\par
\par

\f2\fs20\b 5.2 Email Integration Requirements\b0\par
\f0\fs16 • SMTP configuration for Gmail\par
• Password reset email templates\par
• HTML email formatting\par
• Email validation before sending\par
• Error handling for email delivery failures\par
\par

\f2\fs20\b 5.3 Development Environment Setup\b0\par
\f0\fs16 • Backend: Maven project with Spring Boot 3.2.1\par
• Frontend: Vite React application\par
• Database: MySQL 8.0+ with automatic schema creation\par
• Development servers: Backend on port 5001, Frontend on port 5173\par
• CORS configuration for cross-origin development\par
\par

\f2\fs20\b 5.4 Production Deployment Requirements\b0\par
\f0\fs16 • AWS EC2 deployment scripts included\par
• Nginx reverse proxy configuration\par
• SSL certificate automation\par
• RDS MySQL database setup\par
• S3 + CloudFront for static assets\par
• Environment-specific configuration files\par
\par

\f2\fs20\b 5.5 Additional Features to Implement\b0\par
\f0\fs16 • Task notifications/reminders\par
• Task history and audit trails\par
• Advanced filtering and search\par
• Task comments and collaboration\par
• Dashboard analytics\par
• Mobile-responsive design improvements\par
• Bulk task operations\par
• Export functionality (CSV, PDF)\par
• Calendar integration (iCal export)\par
• Real-time updates via WebSocket\par
\par

\f2\fs14\i Document created on August 18, 2025\par
Repository: management-app\par
Version: 1.0\i0\par
}
