name: Deploy Full Stack (Manual Orchestration)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  full-deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'eu-north-1' }}
    
    - name: Build and Deploy Frontend
      run: |
        cd frontend
        npm ci
        
        # Create production environment file
        cat > .env.production << EOF
        VITE_API_URL=https://${{ secrets.EC2_HOST }}/api
        VITE_ENVIRONMENT=production
        VITE_ENABLE_DEBUG=false
        VITE_ENABLE_ANALYTICS=true
        VITE_API_TIMEOUT=5000
        VITE_CHUNK_SIZE_WARNING_LIMIT=1000
        EOF
        
        # Build frontend
        npm run build
        
        # Deploy to S3
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        aws s3 website s3://${{ secrets.S3_BUCKET_NAME }} --index-document index.html --error-document index.html || echo "Website config may exist"
        
        echo "✅ Frontend deployed successfully"
    
    - name: Build Backend
      run: |
        cd backend
        chmod +x mvnw
        export SPRING_PROFILES_ACTIVE=prod
        ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
        echo "✅ Backend built successfully"
    
    - name: Deploy Backend and Configure Nginx
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 600s
        script: |
          echo "🚀 Starting full stack deployment..."
          
          # Stop services
          sudo systemctl stop figma-app nginx || true
          
          # Install packages
          sudo apt update
          sudo apt install -y mysql-client nginx openjdk-17-jdk
          
          # Test database connection
          timeout 10 bash -c "</dev/tcp/${{ secrets.RDS_ENDPOINT }}/3306" || { echo "RDS connection failed"; exit 1; }
          
          # Create database
          DB_NAME="${{ secrets.RDS_DATABASE }}"
          [ -z "$DB_NAME" ] && DB_NAME="figma_app_prod"
          mysql -h ${{ secrets.RDS_ENDPOINT }} -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || true
          
          # Update code
          if [ -d "/opt/figma-web-app/.git" ]; then
            cd /opt/figma-web-app && sudo git fetch && sudo git reset --hard origin/main
          else
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
          fi
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          
          # Build backend
          cd /opt/figma-web-app/backend && chmod +x mvnw
          sudo SPRING_PROFILES_ACTIVE=prod ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
          
          # Create environment file
          {
            echo "# Production Environment Configuration"
            echo "SPRING_PROFILES_ACTIVE=prod"
            echo "SERVER_PORT=5001"
            echo "SERVER_CONTEXT_PATH=/api"
            
            # Database Configuration
            echo "DB_HOST=${{ secrets.RDS_ENDPOINT }}"
            echo "DB_PORT=3306"
            echo "DB_NAME=${DB_NAME}"
            echo "DB_USERNAME=${{ secrets.RDS_USERNAME }}"
            echo "DB_PASSWORD=${{ secrets.RDS_PASSWORD }}"
            echo "DB_USE_SSL=true"
            echo "DB_TIMEZONE=UTC"
            
            # JWT Configuration - CRITICAL
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            echo "JWT_EXPIRATION_MS=3600000"
            
            # Admin Configuration - CRITICAL
            echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME || 'admin' }}"
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}"
            
            # Email Configuration
            echo "MAIL_HOST=${{ secrets.MAIL_HOST || 'smtp.gmail.com' }}"
            echo "MAIL_PORT=587"
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}"
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}"
            echo "MAIL_SMTP_AUTH=true"
            echo "MAIL_SMTP_STARTTLS=true"
            
            # App Configuration
            echo "FRONTEND_URL=https://${{ secrets.EC2_HOST }}"
            echo "UPLOAD_PATH=/opt/figma-web-app/uploads/profiles"
            echo "FILE_UPLOAD_DIR=/opt/figma-web-app/uploads/profiles/"
            
            # CORS Configuration
            echo "CORS_ORIGIN_PROD=https://${{ secrets.EC2_HOST }}"
            echo "CORS_ORIGIN_EC2_HTTPS=https://${{ secrets.EC2_HOST }}"
            echo "CORS_ORIGIN_S3=https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION || 'eu-north-1' }}.amazonaws.com"
            echo "CORS_ALLOW_CREDENTIALS=true"
            
            # JPA Configuration
            echo "JPA_DDL_AUTO=update"
            echo "JPA_SHOW_SQL=false"
            echo "JPA_FORMAT_SQL=false"
            echo "SQL_INIT_MODE=never"
            
            # Logging Configuration
            echo "LOG_LEVEL_APP=INFO"
            echo "LOG_LEVEL_SECURITY=WARN"
            echo "LOG_LEVEL_WEB=WARN"
            echo "LOG_LEVEL_SQL=ERROR"
            echo "LOG_LEVEL_ROOT=WARN"
            echo "LOG_FILE=/var/log/figma-app/application.log"
            
            # Management Configuration
            echo "MANAGEMENT_ENDPOINTS=health,info"
            echo "MANAGEMENT_HEALTH_DETAILS=when-authorized"
            
          } > /opt/figma-web-app/backend/.env.prod
          
          # Create directories
          sudo mkdir -p /var/log/figma-app /opt/figma-web-app/uploads/profiles
          sudo chown ubuntu:ubuntu /var/log/figma-app /opt/figma-web-app/uploads -R
          
          # Setup systemd service
          sudo tee /etc/systemd/system/figma-app.service > /dev/null << EOF
          [Unit]
          Description=Figma Web App Backend
          After=network.target mysql.service
          Wants=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/opt/figma-web-app/backend
          EnvironmentFile=/opt/figma-web-app/backend/.env.prod
          ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod target/figma-web-app-backend-1.0.0.jar
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          
          # Security settings
          NoNewPrivileges=yes
          PrivateTmp=yes
          ProtectSystem=strict
          ReadWritePaths=/opt/figma-web-app/uploads /var/log/figma-app
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Setup SSL
          sudo mkdir -p /etc/ssl/{private,certs}
          if [ ! -f "/etc/ssl/certs/nginx-selfsigned.crt" ]; then
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/ssl/private/nginx-selfsigned.key \
              -out /etc/ssl/certs/nginx-selfsigned.crt \
              -subj "/CN=${{ secrets.EC2_HOST }}"
          fi
          
          # Setup frontend files
          sudo rm -rf /var/www/html/*
          sudo cp -r /opt/figma-web-app/frontend/dist/* /var/www/html/ || {
            echo "Frontend files not found locally, downloading from S3..."
            aws s3 sync s3://${{ secrets.S3_BUCKET_NAME }}/ /var/www/html/
          }
          sudo chown -R www-data:www-data /var/www/html
          
          # Configure Nginx
          sudo tee /etc/nginx/sites-available/figma-app > /dev/null << 'NGINX_EOF'
          server {
              listen 80;
              return 301 https://\$host\$request_uri;
          }
          server {
              listen 443 ssl;
              ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
              root /var/www/html;
              index index.html;
              location / {
                  try_files \$uri \$uri/ /index.html;
              }
              location /api/ {
                  proxy_pass http://localhost:5001/api/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              location /health {
                  return 200 "healthy";
                  add_header Content-Type text/plain;
              }
          }
          NGINX_EOF
          
          # Enable services
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo ln -sf /etc/nginx/sites-available/figma-app /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl enable nginx && sudo systemctl start nginx
          
          # Verify environment file was created
          echo "Checking environment file:"
          ls -la /opt/figma-web-app/backend/.env.prod
          echo "Environment file contents (first 10 lines, no passwords):"
          head -10 /opt/figma-web-app/backend/.env.prod | grep -v PASSWORD | grep -v SECRET
          
          # Reload and start backend service
          sudo systemctl daemon-reload 
          sudo systemctl enable figma-app 
          
          echo "Starting backend service..."
          sudo systemctl start figma-app
          
          # Wait and check
          sleep 30
          echo "Backend status: $(sudo systemctl is-active figma-app)"
          echo "Nginx status: $(sudo systemctl is-active nginx)"
          
          # Check service logs for errors
          echo "Recent backend logs:"
          sudo journalctl -u figma-app --no-pager -n 20 || true
          
          # Test backend health
          echo "Testing backend health..."
          curl -f http://localhost:5001/api/health || echo "Backend health check failed"
          
          # Test full application
          echo "Testing full application..."
          curl -f https://localhost/health || echo "Nginx health check failed"
          
          echo "🎉 Full stack deployment completed!"

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, deploy-nginx]
    if: always()
    steps:
    - name: Full Stack Deployment Summary
      run: |
        echo ""
        echo "🎉 Full Stack Deployment Summary"
        echo "================================="
        echo ""
        echo "🌍 Environment: ${{ env.DEPLOY_ENVIRONMENT }}"
        echo "📅 Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔀 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🔧 Components: ${{ github.event.inputs.components }}"
        echo ""
        echo "📊 Deployment Status:"
        if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "  ✅ Frontend: Deployed successfully"
        elif [[ "${{ needs.deploy-frontend.result }}" == "skipped" ]]; then
          echo "  ⏭️  Frontend: Skipped"
        else
          echo "  ❌ Frontend: Failed"
        fi
        
        if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
          echo "  ✅ Backend: Deployed successfully"
        elif [[ "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
          echo "  ⏭️  Backend: Skipped"
        else
          echo "  ❌ Backend: Failed"
        fi
        
        if [[ "${{ needs.deploy-nginx.result }}" == "success" ]]; then
          echo "  ✅ Nginx: Configured successfully"
        elif [[ "${{ needs.deploy-nginx.result }}" == "skipped" ]]; then
          echo "  ⏭️  Nginx: Skipped"
        else
          echo "  ❌ Nginx: Failed"
        fi
        echo ""
        echo "📱 Application URLs:"
        echo "  • Primary (HTTPS): https://${{ secrets.EC2_HOST }}"
        echo "  • Frontend (S3): https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION || 'eu-north-1' }}.amazonaws.com"
        echo "  • Backend API: https://${{ secrets.EC2_HOST }}/api"
        echo "  • Health Check: https://${{ secrets.EC2_HOST }}/health"
        echo ""
        echo "💡 Next Steps:"
        echo "  • Test the application at https://${{ secrets.EC2_HOST }}"
        echo "  • Check individual component logs if any issues"
        echo "  • Monitor system resources and performance"
        echo ""
        echo "✅ Full stack deployment process completed!"
