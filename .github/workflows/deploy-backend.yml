name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Build Backend with Environment Configuration
      run: |
        cd backend
        chmod +x mvnw
        
        echo "Building backend with production profile..."
        # Set active profile for build
        export SPRING_PROFILES_ACTIVE=prod
        
        # Build with production profile
        ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
        
        echo "Backend build completed!"
        echo "Generated JAR files:"
        ls -la target/*.jar || echo "No JAR files found"
    
    - name: Deploy Backend to EC2 with Environment Configuration
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "🚀 Starting backend deployment to EC2..."
          
          # Stop existing backend service
          echo "Stopping existing backend service..."
          sudo systemctl stop figma-app || true
          
          # Install required packages
          echo "Installing required packages..."
          sudo apt update
          sudo apt install -y mysql-client openjdk-17-jdk
          
          # Test RDS connectivity
          echo "Testing RDS connection..."
          timeout 10 bash -c "</dev/tcp/${{ secrets.RDS_ENDPOINT }}/3306" && echo "✅ RDS connection successful" || { echo "❌ RDS connection failed"; exit 1; }
          
          # Create database if it doesn't exist
          echo "Setting up database..."
          DB_NAME="${{ secrets.RDS_DATABASE }}"
          if [ -z "$DB_NAME" ]; then
            echo "RDS_DATABASE secret is empty! Using default: figma_app_prod"
            DB_NAME="figma_app_prod"
          fi
          echo "Database name: $DB_NAME"
          
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || echo "Database may already exist"
          
          # Update or clone repository
          echo "Updating application code..."
          if [ -d "/opt/figma-web-app/.git" ]; then
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
            echo "Repository updated from Git"
          else
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            echo "Repository cloned from Git"
          fi
          
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          
          # Build backend on server with production profile
          echo "Building backend on server with production profile..."
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo SPRING_PROFILES_ACTIVE=prod ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
          
          if [ ! -f "target/figma-web-app-backend-1.0.0.jar" ]; then
            echo "❌ JAR file not found!"
            sudo ls -la target/
            exit 1
          fi
          echo "✅ Backend JAR built successfully with production profile"
          
          # Create comprehensive production environment file
          echo "Creating production environment configuration..."
          {
            echo "# Production Environment Configuration - Auto-generated by GitHub Actions"
            echo ""
            echo "# Environment Profile"
            echo "SPRING_PROFILES_ACTIVE=prod"
            echo ""
            echo "# Server Configuration"
            echo "SERVER_PORT=5001"
            echo "SERVER_CONTEXT_PATH=/api"
            echo "APP_NAME=figma-web-app-backend"
            echo ""
            echo "# Database Configuration (Production)"
            echo "DB_HOST=${{ secrets.RDS_ENDPOINT }}"
            echo "DB_PORT=3306"
            echo "DB_NAME=${DB_NAME}"
            echo "DB_USERNAME=${{ secrets.RDS_USERNAME }}"
            echo "DB_PASSWORD=${{ secrets.RDS_PASSWORD }}"
            echo "DB_USE_SSL=true"
            echo "DB_TIMEZONE=UTC"
            echo ""
            echo "# JPA Configuration (Production)"
            echo "JPA_DDL_AUTO=update"
            echo "JPA_SHOW_SQL=false"
            echo "JPA_FORMAT_SQL=false"
            echo "SQL_INIT_MODE=never"
            echo ""
            echo "# Security Configuration (Production)"
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            echo "JWT_EXPIRATION_MS=3600000"
            echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME || 'admin' }}"
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}"
            echo ""
            echo "# Email Configuration (Production)"
            echo "MAIL_HOST=${{ secrets.MAIL_HOST || 'smtp.gmail.com' }}"
            echo "MAIL_PORT=${{ secrets.MAIL_PORT || '587' }}"
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}"
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}"
            echo "MAIL_SMTP_AUTH=true"
            echo "MAIL_SMTP_STARTTLS=true"
            echo "EMAIL_RESET_TOKEN_EXPIRY=15"
            echo ""
            echo "# CORS Configuration (Production)"
            echo "CORS_ORIGIN_PROD=https://${{ secrets.EC2_HOST }}"
            echo "CORS_ORIGIN_S3=https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION || 'eu-north-1' }}.amazonaws.com"
            echo "CORS_ORIGIN_EC2_HTTPS=https://${{ secrets.EC2_HOST }}"
            echo "CORS_ALLOW_CREDENTIALS=true"
            echo ""
            echo "# Frontend Configuration (Production)"
            echo "FRONTEND_URL=https://${{ secrets.EC2_HOST }}"
            echo ""
            echo "# File Upload Configuration (Production)"
            echo "FILE_UPLOAD_DIR=/opt/figma-web-app/uploads/profiles/"
            echo "UPLOAD_PATH=/opt/figma-web-app/uploads/profiles"
            echo "MULTIPART_MAX_FILE_SIZE=10MB"
            echo "MULTIPART_MAX_REQUEST_SIZE=10MB"
            echo ""
            echo "# Logging Configuration (Production)"
            echo "LOG_LEVEL_APP=INFO"
            echo "LOG_LEVEL_SECURITY=WARN"
            echo "LOG_LEVEL_WEB=WARN"
            echo "LOG_LEVEL_SQL=ERROR"
            echo "LOG_LEVEL_ROOT=WARN"
            echo "LOG_FILE=/var/log/figma-app/application.log"
            echo "LOG_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
            echo "LOG_PATTERN_FILE=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
            echo ""
            echo "# Management Endpoints (Production)"
            echo "MANAGEMENT_ENDPOINTS=health,info"
            echo "MANAGEMENT_HEALTH_DETAILS=when-authorized"
          } > /tmp/backend.env

          # Move environment file to correct location
          sudo mv /tmp/backend.env /opt/figma-web-app/backend/.env
          sudo chown ubuntu:ubuntu /opt/figma-web-app/backend/.env
          
          # Validate critical environment variables
          echo "Validating critical environment variables..."
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ ERROR: JWT_SECRET is empty - this will cause authentication failures"
            exit 1
          fi
          
          if [ -z "${{ secrets.RDS_PASSWORD }}" ]; then
            echo "❌ ERROR: RDS_PASSWORD is empty - database connection will fail"
            exit 1
          fi
          
          if [ -z "${{ secrets.ADMIN_PASSWORD }}" ]; then
            echo "❌ ERROR: ADMIN_PASSWORD is empty - admin login will fail"
            exit 1
          fi
          
          echo "✅ Critical environment variables validated"
          echo "✅ Environment file created successfully"
          
          # Create log directory
          sudo mkdir -p /var/log/figma-app
          sudo chown ubuntu:ubuntu /var/log/figma-app
          
          # Create uploads directory
          sudo mkdir -p /opt/figma-web-app/uploads/profiles
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app/uploads
          
          # Create systemd service with proper environment configuration
          echo "Creating systemd service with environment-based configuration..."
          sudo tee /etc/systemd/system/figma-app.service > /dev/null << 'SYSTEMD_SERVICE_EOF'
          [Unit]
          Description=Figma Web App Backend (Production)
          After=network.target mysql.service
          Wants=mysql.service
          
          [Service]
          Type=simple
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/opt/figma-web-app/backend
          EnvironmentFile=/opt/figma-web-app/backend/.env
          ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod -Djava.security.egd=file:/dev/./urandom /opt/figma-web-app/backend/target/figma-web-app-backend-1.0.0.jar
          ExecStop=/bin/kill -TERM $MAINPID
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          
          # Security settings
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ReadWritePaths=/opt/figma-web-app/uploads /var/log/figma-app
          
          [Install]
          WantedBy=multi-user.target
          SYSTEMD_SERVICE_EOF
          
          sudo systemctl daemon-reload
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          
          # Start backend service
          echo "Starting backend service..."
          sudo systemctl enable figma-app
          sudo systemctl start figma-app
          
          # Wait for backend to start
          echo "Waiting for backend to start..."
          sleep 15
          
          # Check backend service status
          if sudo systemctl is-active --quiet figma-app; then
            echo "✅ Backend service is running successfully"
          else
            echo "❌ Backend service failed to start"
            echo "Service status:"
            sudo systemctl status figma-app
            echo "Recent logs:"
            sudo journalctl -u figma-app -n 20
            exit 1
          fi
          
          # Final backend health check
          echo "Performing backend health check..."
          if curl -f -s http://localhost:5001/api/health > /dev/null 2>&1; then
            echo "✅ Backend health check passed"
          else
            echo "⚠️  Backend health check failed - but service is running"
          fi
          
          echo ""
          echo "🎉 Backend deployment completed successfully!"
          echo ""
          echo "Backend Service Status: $(sudo systemctl is-active figma-app)"
    
    - name: Backend Deployment Summary
      run: |
        echo ""
        echo "🎉 Backend Deployment Completed!"
        echo ""
        echo "🌍 Environment: ${{ env.DEPLOY_ENVIRONMENT }}"
        echo "📅 Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔀 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo ""
        echo "🔧 Backend API Endpoints:"
        echo "  • Backend API: https://${{ secrets.EC2_HOST }}/api"
        echo "  • Health Check: https://${{ secrets.EC2_HOST }}/api/health"
        echo "  • Management: https://${{ secrets.EC2_HOST }}/actuator"
        echo ""
        echo "⚙️  Backend Configuration:"
        echo "  • Java: 17 (Temurin)"
        echo "  • Framework: Spring Boot"
        echo "  • Profile: prod"
        echo "  • Database: RDS MySQL (${{ secrets.RDS_ENDPOINT }})"
        echo "  • Port: 5001"
        echo "  • Log Level: INFO (production optimized)"
        echo "  • JWT Expiration: 1 hour"
        echo "  • File Uploads: /opt/figma-web-app/uploads/"
        echo "  • Application Logs: /var/log/figma-app/"
        echo ""
        echo "🔒 Security Features:"
        echo "  • Environment-specific configuration"
        echo "  • Secure systemd service configuration"
        echo "  • Production logging levels"
        echo "  • Database SSL connection"
        echo ""
        echo "💾 Infrastructure:"
        echo "  • Backend: Spring Boot (prod profile) → EC2"
        echo "  • Database: RDS MySQL with SSL"
        echo "  • Service Management: systemd"
        echo ""
        echo "✅ Backend service deployed successfully!"
