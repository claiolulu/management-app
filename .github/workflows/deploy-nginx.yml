name: Deploy Nginx Configuration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy-nginx:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy Nginx Configuration to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "üîß Setting up Nginx configuration..."
          
          # Install Nginx if not already installed
          sudo apt update
          sudo apt install -y nginx
          
          # Setup SSL certificates
          echo "Setting up SSL certificates..."
          sudo mkdir -p /etc/ssl/private
          sudo mkdir -p /etc/ssl/certs
          
          # Generate self-signed certificate if it doesn't exist
          if [ ! -f "/etc/ssl/certs/nginx-selfsigned.crt" ]; then
            echo "Generating SSL certificate..."
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout /etc/ssl/private/nginx-selfsigned.key \
                -out /etc/ssl/certs/nginx-selfsigned.crt \
                -subj "/C=US/ST=State/L=City/O=Organization/CN=${{ secrets.EC2_HOST }}"
          fi
          
          # Generate DH parameters if they don't exist
          if [ ! -f "/etc/ssl/certs/dhparam.pem" ]; then
            echo "Generating DH parameters (this may take a few minutes)..."
            sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
          fi
          
          # Set proper SSL permissions
          sudo chmod 600 /etc/ssl/private/nginx-selfsigned.key
          sudo chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
          sudo chmod 644 /etc/ssl/certs/dhparam.pem
          
          # Setup frontend files directory
          echo "Setting up frontend files directory..."
          sudo mkdir -p /var/www/html
          sudo chown -R www-data:www-data /var/www/html
          
          # Create comprehensive Nginx configuration with SSL
          echo "Configuring Nginx with SSL..."
          sudo tee /etc/nginx/sites-available/figma-app > /dev/null << 'NGINX_CONFIG_EOF'
          # HTTP to HTTPS redirect
          server {
              listen 80;
              server_name _;
              return 301 https://$host$request_uri;
          }
          
          # HTTPS server with SSL
          server {
              listen 443 ssl http2;
              server_name _;
              
              # SSL Configuration
              ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
              ssl_dhparam /etc/ssl/certs/dhparam.pem;
              
              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_session_timeout 10m;
              ssl_session_cache shared:SSL:10m;
              ssl_session_tickets off;
              
              # Security Headers
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
              add_header X-Content-Type-Options nosniff;
              add_header X-Frame-Options DENY;
              add_header X-XSS-Protection "1; mode=block";
              add_header Referrer-Policy "strict-origin-when-cross-origin";
              
              # Frontend Configuration
              root /var/www/html;
              index index.html;
              
              # Frontend routing (React Router support)
              location / {
                  try_files $uri $uri/ /index.html;
                  add_header Cache-Control "no-cache, no-store, must-revalidate";
                  add_header Pragma "no-cache";
                  add_header Expires "0";
              }
              
              # Static assets caching
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  try_files $uri =404;
              }
              
              # API proxy to backend
              location /api/ {
                  proxy_pass http://localhost:5001/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header X-Forwarded-Port $server_port;
                  
                  # Timeout settings
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
          NGINX_CONFIG_EOF
          
          # Enable the new configuration
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo rm -f /etc/nginx/sites-enabled/figma-app
          sudo ln -s /etc/nginx/sites-available/figma-app /etc/nginx/sites-enabled/
          
          # Test Nginx configuration
          sudo nginx -t && echo "‚úÖ Nginx config test passed" || { echo "‚ùå Nginx config test failed"; exit 1; }
          
          # Start Nginx
          echo "Starting Nginx..."
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          
          if sudo systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx is running successfully"
          else
            echo "‚ùå Nginx failed to start"
            sudo systemctl status nginx
            exit 1
          fi
          
          # Check HTTPS endpoint
          if curl -f -s -k https://localhost/health > /dev/null 2>&1; then
            echo "‚úÖ HTTPS endpoint health check passed"
          else
            echo "‚ö†Ô∏è  HTTPS endpoint health check failed - but continuing deployment"
          fi
          
          echo ""
          echo "üéâ Nginx configuration deployment completed successfully!"
          echo "Nginx Status: $(sudo systemctl is-active nginx)"
    
    - name: Nginx Deployment Summary
      run: |
        echo ""
        echo "üéâ Nginx Configuration Deployment Completed!"
        echo ""
        echo "üåç Environment: ${{ env.DEPLOY_ENVIRONMENT }}"
        echo "üìÖ Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "üîß Nginx Configuration:"
        echo "  ‚Ä¢ HTTPS Port: 443"
        echo "  ‚Ä¢ HTTP Redirect: 80 ‚Üí 443"
        echo "  ‚Ä¢ Frontend Root: /var/www/html"
        echo "  ‚Ä¢ Backend Proxy: /api/ ‚Üí http://localhost:5001/api/"
        echo "  ‚Ä¢ SSL: Self-signed certificate"
        echo "  ‚Ä¢ Security Headers: Enabled"
        echo ""
        echo "üîí Security Features:"
        echo "  ‚Ä¢ SSL/TLS encryption enabled"
        echo "  ‚Ä¢ HTTP to HTTPS redirect"
        echo "  ‚Ä¢ Security headers configured"
        echo "  ‚Ä¢ Modern SSL protocols only (TLSv1.2, TLSv1.3)"
        echo ""
        echo "üì± Access Points:"
        echo "  ‚Ä¢ Main Application: https://${{ secrets.EC2_HOST }}"
        echo "  ‚Ä¢ Health Check: https://${{ secrets.EC2_HOST }}/health"
        echo "  ‚Ä¢ API: https://${{ secrets.EC2_HOST }}/api"
        echo ""
        echo "‚úÖ Nginx configuration deployed successfully!"
