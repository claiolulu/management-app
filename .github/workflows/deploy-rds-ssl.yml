name: Deploy to AWS (S3 + EC2 + RDS) with SSL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        echo "VITE_API_URL=https://${{ secrets.EC2_HOST }}/api" > .env.production
        npm run build
    
    - name: Deploy Frontend to S3
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        
        # Set bucket policy for public read access (if permitted)
        aws s3api put-bucket-policy --bucket ${{ secrets.S3_BUCKET_NAME }} --policy '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::'${{ secrets.S3_BUCKET_NAME }}'/*"
            }
          ]
        }' || echo "Warning: Could not set bucket policy. May need manual configuration."
        
        echo "Files uploaded to S3 bucket successfully!"
    
    - name: Build Backend
      run: |
        cd backend
        chmod +x mvnw
        ./mvnw clean package -DskipTests
    
    - name: Deploy Backend to EC2 with SSL
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "Starting SSL deployment..."
          
          # Stop services
          sudo systemctl stop figma-app || true
          sudo systemctl stop nginx || true
          
          # Install MySQL client if not available
          which mysql || { echo "Installing MySQL client..."; sudo apt update && sudo apt install -y mysql-client; }
          
          # Test RDS connectivity
          echo "Testing RDS connection..."
          timeout 10 bash -c "</dev/tcp/${{ secrets.RDS_ENDPOINT }}/3306" && echo "RDS connection successful" || { echo "RDS connection failed"; exit 1; }
          
          # Create database if it doesn't exist
          echo "Creating database if it doesn't exist..."
          DB_NAME="${{ secrets.RDS_DATABASE }}"
          if [ -z "$DB_NAME" ]; then
            echo "RDS_DATABASE secret is empty! Using default: gcgcm_mgt_db"
            DB_NAME="gcgcm_mgt_db"
          fi
          echo "Database name: $DB_NAME"
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || echo "Database creation failed - it may already exist"
          
          # Update or clone repository
          if [ -d "/opt/figma-web-app/.git" ]; then
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
          else
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          fi
          
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo ./mvnw clean package -DskipTests
          
          if [ ! -f "target/figma-web-app-backend-1.0.0.jar" ]; then
            echo "JAR file not found!"
            sudo ls -la target/
            exit 1
          fi
          
          # Create systemd service
          echo "Creating systemd service..."
          sudo tee /etc/systemd/system/figma-app.service << 'SYSTEMD_EOF'
[Unit]
Description=Figma Web App Backend
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/opt/figma-web-app/backend
Environment=DB_PASSWORD=${{ secrets.RDS_PASSWORD }}
Environment=JWT_SECRET=${{ secrets.JWT_SECRET }}
Environment=ADMIN_PASSWORD=admin123
Environment=SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/$DB_NAME?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
Environment=SPRING_DATASOURCE_USERNAME=${{ secrets.RDS_USERNAME }}
Environment=SPRING_DATASOURCE_PASSWORD=${{ secrets.RDS_PASSWORD }}
ExecStart=/usr/bin/java -jar -Dspring.profiles.active=production /opt/figma-web-app/backend/target/figma-web-app-backend-1.0.0.jar
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
SYSTEMD_EOF
          
          sudo systemctl daemon-reload
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          
          # Setup SSL certificates
          echo "Setting up SSL certificates..."
          sudo mkdir -p /etc/ssl/private
          sudo mkdir -p /etc/ssl/certs
          
          # Generate self-signed certificate
          sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/ssl/private/nginx-selfsigned.key \
              -out /etc/ssl/certs/nginx-selfsigned.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=${{ secrets.EC2_HOST }}"
          
          # Generate DH parameters (skip if exists to save time)
          if [ ! -f "/etc/ssl/certs/dhparam.pem" ]; then
            echo "Generating DH parameters (this may take a few minutes)..."
            sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
          fi
          
          # Set proper permissions
          sudo chmod 600 /etc/ssl/private/nginx-selfsigned.key
          sudo chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
          sudo chmod 644 /etc/ssl/certs/dhparam.pem
          
          # Install and configure Nginx with SSL
          echo "Setting up Nginx with SSL..."
          sudo apt update && sudo apt install -y nginx
          sudo rm -rf /var/www/html/*
          sudo cp -r /opt/figma-web-app/frontend/dist/* /var/www/html/
          sudo chown -R www-data:www-data /var/www/html
          
          # Create SSL Nginx config
          sudo tee /etc/nginx/sites-available/figma-app-ssl << 'NGINX_EOF'
# HTTP to HTTPS redirect
server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name _;
    
    # Self-Signed SSL Configuration
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # Frontend files
    root /var/www/html;
    index index.html;
    
    # Frontend routing (React Router)
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # API proxy to backend
    location /api/ {
        proxy_pass http://localhost:5001/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }
}
NGINX_EOF
          
          # Enable SSL config
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo rm -f /etc/nginx/sites-enabled/figma-app
          sudo ln -s /etc/nginx/sites-available/figma-app-ssl /etc/nginx/sites-enabled/
          
          # Test and start services
          sudo nginx -t && echo "Nginx config test passed" || { echo "Nginx config test failed"; exit 1; }
          
          # Start backend service
          sudo systemctl start figma-app
          sleep 10
          
          if sudo systemctl is-active --quiet figma-app; then
            echo "Backend service is running successfully"
          else
            echo "Backend service failed to start"
            sudo systemctl status figma-app
            sudo journalctl -u figma-app -n 20
            exit 1
          fi
          
          # Start Nginx
          sudo systemctl restart nginx
          sudo systemctl enable nginx
          
          if sudo systemctl is-active --quiet nginx; then
            echo "Nginx SSL is running successfully"
          else
            echo "Nginx failed to start"
            sudo systemctl status nginx
            exit 1
          fi
          
          echo "SSL deployment completed successfully!"
    
    - name: Show URLs
      run: |
        echo "🔒 SSL Deployment Complete!"
        echo ""
        echo "✅ Frontend (HTTPS): https://${{ secrets.EC2_HOST }}"
        echo "✅ Backend API (HTTPS): https://${{ secrets.EC2_HOST }}/api"
        echo ""
        echo "⚠️  Browser Security Warning: You'll see a security warning for self-signed certificate"
        echo "   Click 'Advanced' → 'Proceed to site' to accept the certificate"
        echo ""
        echo "📁 S3 Frontend (HTTPS compatible): https://gcgcm-fe.s3.eu-north-1.amazonaws.com"
        echo ""
        echo "🔧 Ports:"
        echo "   - Port 443 (HTTPS): Frontend + API proxy"
        echo "   - Port 80 (HTTP): Redirects to HTTPS"
        echo "   - Port 5001: Backend (internal only)"
