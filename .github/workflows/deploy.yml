name: Deploy to AWS (Complete Stack)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  # Default to production if not specified
  DEPLOY_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'eu-north-1' }}
    
    - name: Build Frontend with Environment Configuration
      run: |
        cd frontend
        npm ci
        
        # Create production environment file with GitHub Secrets
        echo "Creating .env.production with environment variables..."
        cat > .env.production << EOF
        # Production Environment Configuration (Auto-generated by GitHub Actions)
        VITE_API_URL=https://${{ secrets.EC2_HOST }}/api
        VITE_ENVIRONMENT=production
        VITE_ENABLE_DEBUG=false
        VITE_ENABLE_ANALYTICS=true
        VITE_API_TIMEOUT=5000
        VITE_CHUNK_SIZE_WARNING_LIMIT=1000
        EOF
        
        echo "Environment file created:"
        cat .env.production
        
        # Build with production configuration
        npm run build
        
        echo "Frontend build completed successfully!"
        echo "Build output:"
        ls -la dist/
    
    - name: Deploy Frontend to S3
      run: |
        cd frontend
        echo "Deploying frontend to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
        
        # Sync files to S3
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        
        # Set bucket policy for public read access
        aws s3api put-bucket-policy --bucket ${{ secrets.S3_BUCKET_NAME }} --policy '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::'${{ secrets.S3_BUCKET_NAME }}'/*"
            }
          ]
        }' || echo "Warning: Could not set bucket policy. May need manual configuration."
        
        # Configure website hosting
        aws s3 website s3://${{ secrets.S3_BUCKET_NAME }} --index-document index.html --error-document index.html || echo "Website configuration may already exist"
        
        echo "✅ Frontend deployed to S3 successfully!"
    
    - name: Build Backend with Environment Configuration
      run: |
        cd backend
        chmod +x mvnw
        
        echo "Building backend with production profile..."
        # Set active profile for build
        export SPRING_PROFILES_ACTIVE=prod
        
        # Build with production profile
        ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
        
        echo "Backend build completed!"
        echo "Generated JAR files:"
        ls -la target/*.jar || echo "No JAR files found"
    
    - name: Deploy Backend to EC2 with Environment Configuration
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "🚀 Starting environment-based deployment to EC2..."
          
          # Stop existing services
          echo "Stopping existing services..."
          sudo systemctl stop figma-app || true
          sudo systemctl stop nginx || true
          
          # Install required packages
          echo "Installing required packages..."
          sudo apt update
          sudo apt install -y mysql-client nginx openjdk-17-jdk
          
          # Test RDS connectivity
          echo "Testing RDS connection..."
          timeout 10 bash -c "</dev/tcp/${{ secrets.RDS_ENDPOINT }}/3306" && echo "✅ RDS connection successful" || { echo "❌ RDS connection failed"; exit 1; }
          
          # Create database if it doesn't exist
          echo "Setting up database..."
          DB_NAME="${{ secrets.RDS_DATABASE }}"
          if [ -z "$DB_NAME" ]; then
            echo "RDS_DATABASE secret is empty! Using default: figma_app_prod"
            DB_NAME="figma_app_prod"
          fi
          echo "Database name: $DB_NAME"
          
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || echo "Database may already exist"
          
          # Update or clone repository
          echo "Updating application code..."
          if [ -d "/opt/figma-web-app/.git" ]; then
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
            echo "Repository updated from Git"
          else
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            echo "Repository cloned from Git"
          fi
          
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          
          # Build backend on server with production profile
          echo "Building backend on server with production profile..."
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo SPRING_PROFILES_ACTIVE=prod ./mvnw clean package -DskipTests -Dspring.profiles.active=prod
          
          if [ ! -f "target/figma-web-app-backend-1.0.0.jar" ]; then
            echo "❌ JAR file not found!"
            sudo ls -la target/
            exit 1
          fi
          echo "✅ Backend JAR built successfully with production profile"
          
          # Create comprehensive production environment file
          echo "Creating production environment configuration..."
          sudo tee /opt/figma-web-app/backend/.env > /dev/null << 'BACKEND_ENV_EOF'
          # Production Environment Configuration - Auto-generated by GitHub Actions
          
          # Environment Profile
          SPRING_PROFILES_ACTIVE=prod
          
          # Server Configuration
          SERVER_PORT=5001
          SERVER_CONTEXT_PATH=/api
          APP_NAME=figma-web-app-backend
          
          # Database Configuration (Production)
          DB_HOST=${{ secrets.RDS_ENDPOINT }}
          DB_PORT=3306
          DB_NAME=$DB_NAME
          DB_USERNAME=${{ secrets.RDS_USERNAME }}
          DB_PASSWORD=${{ secrets.RDS_PASSWORD }}
          DB_USE_SSL=true
          DB_TIMEZONE=UTC
          
          # JPA Configuration (Production)
          JPA_DDL_AUTO=update
          JPA_SHOW_SQL=false
          JPA_FORMAT_SQL=false
          SQL_INIT_MODE=never
          
          # Security Configuration (Production)
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_MS=3600000
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME || 'admin' }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          
          # Email Configuration (Production)
          MAIL_HOST=${{ secrets.MAIL_HOST || 'smtp.gmail.com' }}
          MAIL_PORT=${{ secrets.MAIL_PORT || '587' }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_SMTP_AUTH=true
          MAIL_SMTP_STARTTLS=true
          EMAIL_RESET_TOKEN_EXPIRY=15
          
          # CORS Configuration (Production)
          CORS_ORIGIN_PROD=https://${{ secrets.EC2_HOST }}
          CORS_ORIGIN_S3=https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION || 'eu-north-1' }}.amazonaws.com
          CORS_ORIGIN_EC2_HTTPS=https://${{ secrets.EC2_HOST }}
          CORS_ALLOW_CREDENTIALS=true
          
          # Frontend Configuration (Production)
          FRONTEND_URL=https://${{ secrets.EC2_HOST }}
          
          # File Upload Configuration (Production)
          FILE_UPLOAD_DIR=/opt/figma-web-app/uploads/profiles/
          UPLOAD_PATH=/opt/figma-web-app/uploads/profiles
          MULTIPART_MAX_FILE_SIZE=10MB
          MULTIPART_MAX_REQUEST_SIZE=10MB
          
          # Logging Configuration (Production)
          LOG_LEVEL_APP=INFO
          LOG_LEVEL_SECURITY=WARN
          LOG_LEVEL_WEB=WARN
          LOG_LEVEL_SQL=ERROR
          LOG_LEVEL_ROOT=WARN
          LOG_FILE=/var/log/figma-app/application.log
          LOG_PATTERN_CONSOLE=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
          LOG_PATTERN_FILE=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
          
          # Management Endpoints (Production)
          MANAGEMENT_ENDPOINTS=health,info
          MANAGEMENT_HEALTH_DETAILS=when-authorized
          BACKEND_ENV_EOF
          
          # Create log directory
          sudo mkdir -p /var/log/figma-app
          sudo chown ubuntu:ubuntu /var/log/figma-app
          
          # Create uploads directory
          sudo mkdir -p /opt/figma-web-app/uploads/profiles
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app/uploads
          
          # Create systemd service with proper environment configuration
          echo "Creating systemd service with environment-based configuration..."
          sudo tee /etc/systemd/system/figma-app.service > /dev/null << 'SYSTEMD_SERVICE_EOF'
          [Unit]
          Description=Figma Web App Backend (Production)
          After=network.target mysql.service
          Wants=mysql.service
          
          [Service]
          Type=simple
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/opt/figma-web-app/backend
          EnvironmentFile=/opt/figma-web-app/backend/.env
          ExecStart=/usr/bin/java -jar -Dspring.profiles.active=prod -Djava.security.egd=file:/dev/./urandom /opt/figma-web-app/backend/target/figma-web-app-backend-1.0.0.jar
          ExecStop=/bin/kill -TERM $MAINPID
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          
          # Security settings
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ReadWritePaths=/opt/figma-web-app/uploads /var/log/figma-app
          
          [Install]
          WantedBy=multi-user.target
          SYSTEMD_SERVICE_EOF
          
          sudo systemctl daemon-reload
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          
          # Setup SSL certificates
          echo "Setting up SSL certificates..."
          sudo mkdir -p /etc/ssl/private
          sudo mkdir -p /etc/ssl/certs
          
          # Generate self-signed certificate if it doesn't exist
          if [ ! -f "/etc/ssl/certs/nginx-selfsigned.crt" ]; then
            echo "Generating SSL certificate..."
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout /etc/ssl/private/nginx-selfsigned.key \
                -out /etc/ssl/certs/nginx-selfsigned.crt \
                -subj "/C=US/ST=State/L=City/O=Organization/CN=${{ secrets.EC2_HOST }}"
          fi
          
          # Generate DH parameters if they don't exist
          if [ ! -f "/etc/ssl/certs/dhparam.pem" ]; then
            echo "Generating DH parameters (this may take a few minutes)..."
            sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
          fi
          
          # Set proper SSL permissions
          sudo chmod 600 /etc/ssl/private/nginx-selfsigned.key
          sudo chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
          sudo chmod 644 /etc/ssl/certs/dhparam.pem
          
          # Setup frontend files in Nginx
          echo "Setting up Nginx with frontend files..."
          sudo rm -rf /var/www/html/*
          sudo cp -r /opt/figma-web-app/frontend/dist/* /var/www/html/
          sudo chown -R www-data:www-data /var/www/html
          
          # Create comprehensive Nginx configuration with SSL
          echo "Configuring Nginx with SSL..."
          sudo tee /etc/nginx/sites-available/figma-app > /dev/null << 'NGINX_CONFIG_EOF'
          # HTTP to HTTPS redirect
          server {
              listen 80;
              server_name _;
              return 301 https://$host$request_uri;
          }
          
          # HTTPS server with SSL
          server {
              listen 443 ssl http2;
              server_name _;
              
              # SSL Configuration
              ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
              ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
              ssl_dhparam /etc/ssl/certs/dhparam.pem;
              
              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
              ssl_session_timeout 10m;
              ssl_session_cache shared:SSL:10m;
              ssl_session_tickets off;
              
              # Security Headers
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
              add_header X-Content-Type-Options nosniff;
              add_header X-Frame-Options DENY;
              add_header X-XSS-Protection "1; mode=block";
              add_header Referrer-Policy "strict-origin-when-cross-origin";
              
              # Frontend Configuration
              root /var/www/html;
              index index.html;
              
              # Frontend routing (React Router support)
              location / {
                  try_files $uri $uri/ /index.html;
                  add_header Cache-Control "no-cache, no-store, must-revalidate";
                  add_header Pragma "no-cache";
                  add_header Expires "0";
              }
              
              # Static assets caching
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  try_files $uri =404;
              }
              
              # API proxy to backend
              location /api/ {
                  proxy_pass http://localhost:5001/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header X-Forwarded-Port $server_port;
                  
                  # Timeout settings
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 "healthy\n";
                  add_header Content-Type text/plain;
              }
          }
          NGINX_CONFIG_EOF
          
          # Enable the new configuration
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo rm -f /etc/nginx/sites-enabled/figma-app-ssl
          sudo ln -s /etc/nginx/sites-available/figma-app /etc/nginx/sites-enabled/
          
          # Test Nginx configuration
          sudo nginx -t && echo "✅ Nginx config test passed" || { echo "❌ Nginx config test failed"; exit 1; }
          
          # Start backend service
          echo "Starting backend service..."
          sudo systemctl enable figma-app
          sudo systemctl start figma-app
          
          # Wait for backend to start
          echo "Waiting for backend to start..."
          sleep 15
          
          # Check backend service status
          if sudo systemctl is-active --quiet figma-app; then
            echo "✅ Backend service is running successfully"
          else
            echo "❌ Backend service failed to start"
            echo "Service status:"
            sudo systemctl status figma-app
            echo "Recent logs:"
            sudo journalctl -u figma-app -n 20
            exit 1
          fi
          
          # Start Nginx
          echo "Starting Nginx..."
          sudo systemctl enable nginx
          sudo systemctl restart nginx
          
          if sudo systemctl is-active --quiet nginx; then
            echo "✅ Nginx is running successfully"
          else
            echo "❌ Nginx failed to start"
            sudo systemctl status nginx
            exit 1
          fi
          
          # Final health checks
          echo "Performing health checks..."
          
          # Check backend health
          if curl -f -s http://localhost:5001/api/health > /dev/null 2>&1; then
            echo "✅ Backend health check passed"
          else
            echo "⚠️  Backend health check failed - but continuing deployment"
          fi
          
          # Check HTTPS endpoint
          if curl -f -s -k https://localhost/health > /dev/null 2>&1; then
            echo "✅ HTTPS endpoint health check passed"
          else
            echo "⚠️  HTTPS endpoint health check failed - but continuing deployment"
          fi
          
          echo ""
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "Services Status:"
          echo "Backend: $(sudo systemctl is-active figma-app)"
          echo "Nginx: $(sudo systemctl is-active nginx)"
    
    - name: Environment-Based Deployment Summary
      run: |
        echo ""
        echo "🎉 Environment-Based Stack Deployment Completed!"
        echo ""
        echo "🌍 Environment: ${{ env.DEPLOY_ENVIRONMENT }}"
        echo "📅 Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔀 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo ""
        echo "📱 Application URLs:"
        echo "  • Primary (HTTPS): https://${{ secrets.EC2_HOST }}"
        echo "  • S3 Backup: https://${{ secrets.S3_BUCKET_NAME }}.s3.${{ secrets.AWS_REGION || 'eu-north-1' }}.amazonaws.com"
        echo ""
        echo "🔧 API Endpoints:"
        echo "  • Backend API: https://${{ secrets.EC2_HOST }}/api"
        echo "  • Health Check: https://${{ secrets.EC2_HOST }}/health"
        echo "  • Management: https://${{ secrets.EC2_HOST }}/actuator"
        echo ""
        echo "⚙️  Environment Configuration:"
        echo "  • Backend Profile: prod"
        echo "  • Frontend Environment: production"
        echo "  • Database: RDS MySQL (${{ secrets.RDS_ENDPOINT }})"
        echo "  • Log Level: INFO (production optimized)"
        echo "  • JWT Expiration: 1 hour"
        echo "  • File Uploads: /opt/figma-web-app/uploads/"
        echo "  • Application Logs: /var/log/figma-app/"
        echo ""
        echo "🔒 Security Features:"
        echo "  • SSL/TLS encryption enabled"
        echo "  • HTTP to HTTPS redirect"
        echo "  • Security headers configured"
        echo "  • Environment-specific CORS policies"
        echo "  • Secure systemd configuration"
        echo "  • Production logging levels"
        echo ""
        echo "💾 Infrastructure:"
        echo "  • Frontend: React + Vite → S3 + EC2/Nginx"
        echo "  • Backend: Spring Boot (prod profile) → EC2"
        echo "  • Database: RDS MySQL with SSL"
        echo "  • Reverse Proxy: Nginx with SSL termination"
        echo ""
        echo "⚠️  Important Notes:"
        echo "  • First visit: Browser will show SSL warning (self-signed cert)"
        echo "  • Click 'Advanced' → 'Proceed to site' to continue"
        echo "  • All environment variables are properly configured"
        echo "  • Production profile is active with optimized settings"
        echo ""
        echo "✅ All services deployed with environment-based configuration!"
