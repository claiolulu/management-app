name: Deploy Frontend to S3 & Backend to EC2 (eu-north-1)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        # Update API base URL for production
        echo "VITE_API_URL=http://${{ secrets.EC2_HOST }}:5001/api" > .env.production
        npm run build
    
    - name: Deploy Frontend to S3
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        # Invalidate CloudFront if you have it
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" || echo "CloudFront not configured, skipping invalidation"
    
    - name: Build Backend
      run: |
        cd backend
        chmod +x mvnw
        ./mvnw clean package -DskipTests
    
    - name: Deploy Backend to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color
          
          echo -e "${YELLOW}🚀 Starting backend deployment...${NC}"
          
          # Stop existing backend service
          echo -e "${YELLOW}⏹️  Stopping backend service...${NC}"
          sudo systemctl stop figma-app || true
          
          # Create backup
          BACKUP_DIR="/opt/figma-web-app-backup-$(date +%Y%m%d_%H%M%S)"
          if [ -d "/opt/figma-web-app" ]; then
            echo -e "${YELLOW}📦 Creating backup at $BACKUP_DIR${NC}"
            sudo cp -r /opt/figma-web-app $BACKUP_DIR || true
          fi
          
          # Clone/update repository
          if [ -d "/opt/figma-web-app/.git" ]; then
            echo -e "${YELLOW}🔄 Updating existing repository...${NC}"
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
          else
            echo -e "${YELLOW}📥 Removing old directory and cloning fresh...${NC}"
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          fi
          
          cd /opt/figma-web-app
          
          # Update systemd service file to use absolute path
          echo -e "${YELLOW}🔧 Updating systemd service...${NC}"
          sudo tee /etc/systemd/system/figma-app.service > /dev/null <<EOF
          [Unit]
          Description=Figma Web App Backend
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/figma-web-app/backend
          ExecStart=/usr/bin/java -jar /opt/figma-web-app/backend/target/figma-web-app-0.0.1-SNAPSHOT.jar
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOF

          # Reload systemd daemon
          sudo systemctl daemon-reload

          # Build backend
          echo -e "${YELLOW}🏗️  Building backend...${NC}"
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo ./mvnw clean package -DskipTests
          
          # Set permissions
          echo -e "${YELLOW}🔧 Setting permissions...${NC}"
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          
          # Update CORS configuration for S3 frontend
          echo -e "${YELLOW}🌐 Updating CORS configuration...${NC}"
          sudo mkdir -p /opt/figma-web-app/backend/src/main/resources
          sudo tee /opt/figma-web-app/backend/src/main/resources/application-prod.yml > /dev/null <<EOF
          cors:
            allowed-origins: 
              - https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com
              - http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com
              - https://${{ secrets.CLOUDFRONT_DOMAIN }}
              - http://localhost:5173
            allowed-methods: [GET, POST, PUT, DELETE, OPTIONS]
            allowed-headers: "*"
            allow-credentials: true
          EOF
          
          # Start backend service
          echo -e "${YELLOW}▶️  Starting backend service...${NC}"
          sudo systemctl start figma-app
          
          # Wait for service to start
          sleep 15
          
          # Verify deployment
          echo -e "${YELLOW}✅ Verifying backend deployment...${NC}"
          
          if sudo systemctl is-active --quiet figma-app; then
            echo -e "${GREEN}✅ Backend service is running${NC}"
          else
            echo -e "${RED}❌ Backend service failed to start${NC}"
            sudo systemctl status figma-app
            sudo journalctl -u figma-app -n 20 --no-pager
            exit 1
          fi
          
          # Test backend health
          if curl -f http://localhost:5001/api/auth/health &>/dev/null; then
            echo -e "${GREEN}✅ Backend API is responding${NC}"
          else
            echo -e "${YELLOW}⚠️  Backend API not responding (may be starting up)${NC}"
          fi
          
          echo -e "${GREEN}🎉 Backend deployment completed successfully!${NC}"
          
          # Cleanup old backups (keep last 3)
          echo -e "${YELLOW}🧹 Cleaning up old backups...${NC}"
          sudo find /opt -name "figma-web-app-backup-*" -type d | sort -r | tail -n +4 | xargs sudo rm -rf || true
          
          echo -e "${GREEN}✨ Backend deployment done!${NC}"
    
    - name: Display Deployment URLs
      run: |
        echo "🎉 Deployment Complete!"
        echo "Frontend URL: https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
        echo "CloudFront URL: https://${{ secrets.CLOUDFRONT_DOMAIN }}" || echo "CloudFront not configured"
        echo "Backend API URL: http://${{ secrets.EC2_HOST }}:5001/api"
        npm ci
        # Update API base URL for production
        echo "VITE_API_URL=http://${{ secrets.EC2_HOST }}/api" > .env.production
        npm run build
    
    - name: Deploy Frontend to S3
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        # Invalidate CloudFront if you have it
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" || echo "CloudFront not configured, skipping invalidation"
    
    - name: Build Backend
      run: |
        cd backend
        chmod +x mvnw
        ./mvnw clean package -DskipTests
    
    - name: Deploy Backend to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color
          
          echo -e "${YELLOW}🚀 Starting backend deployment...${NC}"
          
          # Stop existing backend service
          echo -e "${YELLOW}⏹️  Stopping backend service...${NC}"
          sudo systemctl stop figma-app || true
          
          # Create backup
          BACKUP_DIR="/opt/figma-web-app-backup-$(date +%Y%m%d_%H%M%S)"
          if [ -d "/opt/figma-web-app" ]; then
            echo -e "${YELLOW}📦 Creating backup at $BACKUP_DIR${NC}"
            sudo cp -r /opt/figma-web-app $BACKUP_DIR || true
          fi
          
          # Clone/update repository
          if [ -d "/opt/figma-web-app/.git" ]; then
            echo -e "${YELLOW}🔄 Updating existing repository...${NC}"
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
          else
            echo -e "${YELLOW}📥 Removing old directory and cloning fresh...${NC}"
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          fi
          
          cd /opt/figma-web-app
          
          # Update systemd service file to use absolute path
          echo -e "${YELLOW}🔧 Updating systemd service...${NC}"
          sudo tee /etc/systemd/system/figma-app.service > /dev/null <<EOF
          [Unit]
          Description=Figma Web App Backend
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/figma-web-app/backend
          ExecStart=/usr/bin/java -jar /opt/figma-web-app/backend/target/figma-web-app-0.0.1-SNAPSHOT.jar
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOF

          # Reload systemd daemon
          sudo systemctl daemon-reload

          # Build backend
          echo -e "${YELLOW}🏗️  Building backend...${NC}"
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo ./mvnw clean package -DskipTests
          
          # Set permissions
          echo -e "${YELLOW}🔧 Setting permissions...${NC}"
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          
          # Update CORS configuration for S3 frontend
          echo -e "${YELLOW}� Updating CORS configuration...${NC}"
          sudo tee /opt/figma-web-app/backend/src/main/resources/application-prod.yml > /dev/null <<EOF
          cors:
            allowed-origins: 
              - https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com
              - http://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com
              - https://${{ secrets.CLOUDFRONT_DOMAIN }}
              - http://localhost:5173
            allowed-methods: [GET, POST, PUT, DELETE, OPTIONS]
            allowed-headers: "*"
            allow-credentials: true
          EOF
          
          # Start backend service
          echo -e "${YELLOW}▶️  Starting backend service...${NC}"
          sudo systemctl start figma-app
          
          # Wait for service to start
          sleep 15
          
          # Verify deployment
          echo -e "${YELLOW}✅ Verifying backend deployment...${NC}"
          
          if sudo systemctl is-active --quiet figma-app; then
            echo -e "${GREEN}✅ Backend service is running${NC}"
          else
            echo -e "${RED}❌ Backend service failed to start${NC}"
            sudo systemctl status figma-app
            exit 1
          fi
          
          # Test backend health
          if curl -f http://localhost:5001/api/auth/health &>/dev/null; then
            echo -e "${GREEN}✅ Backend API is responding${NC}"
          else
            echo -e "${YELLOW}⚠️  Backend API not responding (may be starting up)${NC}"
          fi
          
          echo -e "${GREEN}🎉 Backend deployment completed successfully!${NC}"
          
          # Cleanup old backups (keep last 3)
          echo -e "${YELLOW}🧹 Cleaning up old backups...${NC}"
          sudo find /opt -name "figma-web-app-backup-*" -type d | sort -r | tail -n +4 | xargs sudo rm -rf || true
          
          echo -e "${GREEN}✨ Backend deployment done!${NC}"
    
    - name: Display Deployment URLs
      run: |
        echo "🎉 Deployment Complete!"
        echo "Frontend URL: https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
        echo "CloudFront URL: https://${{ secrets.CLOUDFRONT_DOMAIN }}" || echo "CloudFront not configured"
        echo "Backend API URL: http://${{ secrets.EC2_HOST }}/api"
