name: Deploy to AWS (S3 + EC2 + RDS)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
    
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        echo "VITE_API_URL=http://${{ secrets.EC2_HOST }}:5001/api" > .env.production
        npm run build
    
    - name: Deploy Frontend to S3 (Private with CloudFront)
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete
        
        # Block public access to S3 bucket (only allow CloudFront)
        aws s3api put-public-access-block --bucket ${{ secrets.S3_BUCKET_NAME }} --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        
        echo "S3 bucket is now private. You need to:"
        echo "1. Create CloudFront distribution in AWS Console"
        echo "2. Set Origin Domain to: ${{ secrets.S3_BUCKET_NAME }}.s3.eu-north-1.amazonaws.com"
        echo "3. Use CloudFront domain in CORS configuration"
    
    - name: Build Backend
      run: |
        cd backend
        chmod +x mvnw
        ./mvnw clean package -DskipTests
    
    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "Starting RDS deployment..."
          
          # Install MySQL client if not available
          which mysql || { echo "Installing MySQL client..."; sudo apt update && sudo apt install -y mysql-client; }
          
          sudo systemctl stop figma-app || true
          
          # Test RDS connectivity
          echo "Testing RDS connection..."
          timeout 10 bash -c "</dev/tcp/${{ secrets.RDS_ENDPOINT }}/3306" && echo "RDS connection successful" || { echo "RDS connection failed"; exit 1; }
          
          # Create database if it doesn't exist
          echo "Creating database if it doesn't exist..."
          DB_NAME="${{ secrets.RDS_DATABASE }}"
          if [ -z "$DB_NAME" ]; then
            echo "RDS_DATABASE secret is empty! Using default: gcgcm_mgt_db"
            DB_NAME="gcgcm_mgt_db"
          fi
          echo "Database name: $DB_NAME"
          echo "RDS Endpoint: ${{ secrets.RDS_ENDPOINT }}"
          echo "Username: ${{ secrets.RDS_USERNAME }}"
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || echo "Database creation failed - it may already exist"
          
          # Verify database exists
          echo "Verifying database exists..."
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "SHOW DATABASES;" | grep -i $DB_NAME && echo "Database verified" || { echo "Database not found after creation"; exit 1; }
          
          if [ -d "/opt/figma-web-app/.git" ]; then
            cd /opt/figma-web-app
            sudo git fetch origin
            sudo git reset --hard origin/main
            sudo git clean -fd
          else
            sudo rm -rf /opt/figma-web-app
            sudo git clone https://github.com/${{ github.repository }}.git /opt/figma-web-app
            sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          fi
          
          cd /opt/figma-web-app/backend
          sudo chmod +x mvnw
          sudo ./mvnw clean package -DskipTests
          
          if [ ! -f "target/figma-web-app-backend-1.0.0.jar" ]; then
            echo "JAR file not found!"
            sudo ls -la target/
            exit 1
          fi
          
          # Create environment variables file
          echo "DB_PASSWORD=${{ secrets.RDS_PASSWORD }}" | sudo tee /opt/figma-web-app/backend/.env > /dev/null
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" | sudo tee -a /opt/figma-web-app/backend/.env > /dev/null
          echo "ADMIN_PASSWORD=admin123" | sudo tee -a /opt/figma-web-app/backend/.env > /dev/null
          
          # Update application.yml to use environment variables and fix dialect
          sudo sed -i "s|url: jdbc:mysql://localhost:3306/figma_app|url: \${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/figma_app}|g" /opt/figma-web-app/backend/src/main/resources/application.yml
          sudo sed -i "s|username: root|username: \${SPRING_DATASOURCE_USERNAME:root}|g" /opt/figma-web-app/backend/src/main/resources/application.yml
          sudo sed -i "s|password:|password: \${SPRING_DATASOURCE_PASSWORD:}|g" /opt/figma-web-app/backend/src/main/resources/application.yml
          sudo sed -i "s|dialect: org.hibernate.dialect.MySQL8Dialect|dialect: org.hibernate.dialect.MySQLDialect|g" /opt/figma-web-app/backend/src/main/resources/application.yml
          
          # Enable debug logging for Hibernate
          sudo sed -i "s|com.figmaapp: INFO|com.figmaapp: DEBUG|g" /opt/figma-web-app/backend/src/main/resources/application.yml || echo "Log level not found, will add"
          
          # Create log directory
          sudo mkdir -p /var/log/figma-app
          sudo chown -R ubuntu:ubuntu /var/log/figma-app
          
          
          # Debug: Show the modified main application.yml
          echo "Main application.yml configuration after updates:"
          sudo cat /opt/figma-web-app/backend/src/main/resources/application.yml
          
          # Test RDS connection using MySQL client if available
          echo "Testing direct MySQL connection..."
          mysql -h ${{ secrets.RDS_ENDPOINT }} -P 3306 -u ${{ secrets.RDS_USERNAME }} -p${{ secrets.RDS_PASSWORD }} -e "SELECT 1;" $DB_NAME && echo "MySQL connection successful" || echo "MySQL connection failed"
          
          # Create systemd service
          sudo rm -f /etc/systemd/system/figma-app.service
          echo '[Unit]' | sudo tee /etc/systemd/system/figma-app.service
          echo 'Description=Figma Web App Backend' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'After=network.target' | sudo tee -a /etc/systemd/system/figma-app.service
          echo '' | sudo tee -a /etc/systemd/system/figma-app.service
          echo '[Service]' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'Type=simple' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'User=ubuntu' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'WorkingDirectory=/opt/figma-web-app/backend' | sudo tee -a /etc/systemd/system/figma-app.service
          echo "Environment=DB_PASSWORD=${{ secrets.RDS_PASSWORD }}" | sudo tee -a /etc/systemd/system/figma-app.service
          echo "Environment=JWT_SECRET=${{ secrets.JWT_SECRET }}" | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'Environment=ADMIN_PASSWORD=admin123' | sudo tee -a /etc/systemd/system/figma-app.service
          echo "Environment=SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.RDS_ENDPOINT }}:3306/$DB_NAME?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC" | sudo tee -a /etc/systemd/system/figma-app.service
          echo "Environment=SPRING_DATASOURCE_USERNAME=${{ secrets.RDS_USERNAME }}" | sudo tee -a /etc/systemd/system/figma-app.service
          echo "Environment=SPRING_DATASOURCE_PASSWORD=${{ secrets.RDS_PASSWORD }}" | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'ExecStart=/usr/bin/java -jar -Dspring.profiles.active=production /opt/figma-web-app/backend/target/figma-web-app-backend-1.0.0.jar' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'Restart=always' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'RestartSec=10' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'StandardOutput=journal' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'StandardError=journal' | sudo tee -a /etc/systemd/system/figma-app.service
          echo '' | sudo tee -a /etc/systemd/system/figma-app.service
          echo '[Install]' | sudo tee -a /etc/systemd/system/figma-app.service
          echo 'WantedBy=multi-user.target' | sudo tee -a /etc/systemd/system/figma-app.service
          
          sudo systemctl daemon-reload
          sudo chown -R ubuntu:ubuntu /opt/figma-web-app
          sudo chmod +x /opt/figma-web-app/backend/target/*.jar
          sudo systemctl start figma-app
          
          sleep 15
          
          if sudo systemctl is-active --quiet figma-app; then
            echo "Backend service is running successfully"
            echo "Testing API endpoint..."
            curl -f http://localhost:5001/api/auth/health && echo "API health check passed" || echo "API health check failed"
          else
            echo "Backend service failed to start"
            sudo systemctl status figma-app
            sudo journalctl -u figma-app -n 20
            exit 1
          fi
          
          # Also deploy frontend to EC2 with Nginx
          echo "Setting up frontend on EC2 with Nginx..."
          sudo apt update && sudo apt install -y nginx
          sudo rm -rf /var/www/html/*
          sudo cp -r /opt/figma-web-app/frontend/dist/* /var/www/html/
          sudo chown -R www-data:www-data /var/www/html
          
          # Create Nginx config for React app with API proxy
          echo 'server {' | sudo tee /etc/nginx/sites-available/figma-app
          echo '    listen 80;' | sudo tee -a /etc/nginx/sites-available/figma-app  
          echo '    server_name _;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    root /var/www/html;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    index index.html;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    location / {' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '        try_files $uri $uri/ /index.html;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    }' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    location /api/ {' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '        proxy_pass http://localhost:5001/api/;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '        proxy_set_header Host $host;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '        proxy_set_header X-Real-IP $remote_addr;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '    }' | sudo tee -a /etc/nginx/sites-available/figma-app
          echo '}' | sudo tee -a /etc/nginx/sites-available/figma-app
          
          # Enable site and restart Nginx
          sudo ln -sf /etc/nginx/sites-available/figma-app /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t && sudo systemctl restart nginx && sudo systemctl enable nginx
          
          echo "Deployment completed!"
    
    - name: Show URLs
      run: |
        echo "Frontend (S3 - PRIVATE): Bucket content uploaded to s3://${{ secrets.S3_BUCKET_NAME }}"
        echo "Frontend (EC2 - SECURE): http://${{ secrets.EC2_HOST }} (Nginx serving frontend + API proxy)"
        echo "Backend API (Direct): http://${{ secrets.EC2_HOST }}:5001/api"
        echo ""
        echo "🔒 Security: S3 bucket is now private, only accessible via CloudFront"
        echo "🌐 Recommended: Use the EC2 frontend URL for secure HTTP access"
        echo "📋 Next step: Set up SSL certificate for HTTPS on EC2"
